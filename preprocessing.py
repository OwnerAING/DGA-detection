# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tL5mzZkTKe86sdnkgT6Lh6-u9vi0jkUB
"""

import os
import pickle
import numpy as np
import pandas as pd
from sklearn.utils import shuffle
from sklearn.preprocessing import OneHotEncoder
import tensorflow as tf


def mix_shuffle_data(dga_filename, legit_filename):

    dga = pd.read_csv(r'./' + str(dga_filename))
    legit = pd.read_csv(r'./' + str(legit_filename)) # 数据中含有 Index索引

    dga['label'] = pd.Series(np.ones((len(dga)), int))
    legit['label'] = pd.Series(np.zeros((len(legit)), int))

    data = pd.concat([dga, legit], axis=0)
    data = shuffle(data)
    data.index = range(len(data))
    data['label'] = data['label'].values.astype(np.int8)
    data.to_csv('./data.csv', index=False)
    return data


def _pad(domain, max_length=75):

    if len(domain) < max_length:
        domain = '!' * (max_length - len(domain)) + domain
    return domain


def pad_domain(data_df, pad_fn=_pad):

    # data['len'] = data['domain'].map(lambda x: len(str(x)))
    data['domain'] = data['domain'].map(pad_fn)
    data.to_csv('./data_pad.csv', index=False)
    return data


def _split_one_domain(domain, sep='?'):
    
    result = []
    for char in domain:
        result.append(char)

    result = list(map(lambda x: x.lower(), result))
    return sep.join(result)


def split_domain_df(data, split_fn=_split_one_domain,sep='?'):

    data = pd.concat([pd.DataFrame(data['domain'].map(split_fn).values), data['label']], axis=1)
    data.columns = ['domain', 'label']

    cols = ['domain%d' %d for d in range(0, 75)]
    data[cols] = data['domain'].str.split(sep, expand=True)
    data = data[cols + ['label']]
    data.to_csv('./data_split.csv', index=False)
    return data


def embeding_id_encode(data, dictinary, embeding_cols):

    data[embeding_cols] = data[embeding_cols].apply(lambda x: x.map(dictinary)) # x 为 Series ， 可以使用map进行映射
    data = data[embeding_cols + ['label']]
    data.to_csv('./data_encode.csv', index=False)
    return data



if __name__ == '__main__':

	dictinary = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6,
	             '7':7, '8':8, '9':9, 'a':10, 'b':11, 'c':12, 'd':13, 
	             'e':14, 'f':15, 'g':16, 'h':17, 'i':18, 'j':19, 'k':20, 
	             'l':21, 'm':22, 'n':23, 'o':24, 'p':25, 'q':26, 'r':27,
	             's':28, 't':29, 'u':30, 'v':31, 'w':32, 'x':33, 'y':34,
	             'z':35, '!':36, '-':37, '.':38, '_':39, 'S':40}

	data = mix_shuffle_data('alexa.csv', 'dga.csv')
	data = pad_domain(data)
	data = split_domain_df(data)
    
	em_cols = ['domain%d' %d for d in range(0, 75)]
	data = embeding_id_encode(data, dictinary, em_cols)
	print(data.head(5))